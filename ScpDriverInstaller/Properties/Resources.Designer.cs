//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ScpDriverInstaller.Properties {
    using System;
    
    
    /// <summary>
    ///   Clase de recurso fuertemente tipado, para buscar cadenas traducidas, etc.
    /// </summary>
    // StronglyTypedResourceBuilder generó automáticamente esta clase
    // a través de una herramienta como ResGen o Visual Studio.
    // Para agregar o quitar un miembro, edite el archivo .ResX y, a continuación, vuelva a ejecutar ResGen
    // con la opción /str o recompile su proyecto de VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Devuelve la instancia de ResourceManager almacenada en caché utilizada por esta clase.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ScpDriverInstaller.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Reemplaza la propiedad CurrentUICulture del subproceso actual para todas las
        ///   búsquedas de recursos mediante esta clase de recurso fuertemente tipado.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a &lt; Back.
        /// </summary>
        public static string Back {
            get {
                return ResourceManager.GetString("Back", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a In this step you can initialize one or more Bluetooth hosts..
        /// </summary>
        public static string BluetoothSetupDescription {
            get {
                return ResourceManager.GetString("BluetoothSetupDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Initialized Bluetooth Hosts.
        /// </summary>
        public static string BluetoothSetupInitialized {
            get {
                return ResourceManager.GetString("BluetoothSetupInitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Installing WinUSB driver on Bluetooth Host Devices.
        /// </summary>
        public static string BluetoothSetupInstalling {
            get {
                return ResourceManager.GetString("BluetoothSetupInstalling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a If you haven&apos;t already please plug in your Bluetooth host device (a.k.a. Bluetooth dongle) now and wait until it appears in the list on the right..
        /// </summary>
        public static string BluetoothSetupPleasePlugIn {
            get {
                return ResourceManager.GetString("BluetoothSetupPleasePlugIn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Initialize all connected devices as Bluetooth Hosts.
        /// </summary>
        public static string BluetoothSetupStartInstall {
            get {
                return ResourceManager.GetString("BluetoothSetupStartInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Bluetooth Hosts installed successfully.
        /// </summary>
        public static string BluetoothSetupSuccessInstruction {
            get {
                return ResourceManager.GetString("BluetoothSetupSuccessInstruction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Install Bluetooth hosts.
        /// </summary>
        public static string BluetoothSetupTitle {
            get {
                return ResourceManager.GetString("BluetoothSetupTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Uninitialized Bluetooth Hosts.
        /// </summary>
        public static string BluetoothSetupUninitialized {
            get {
                return ResourceManager.GetString("BluetoothSetupUninitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a first!.
        /// </summary>
        public static string BluetoothSetupWarningAfterLink {
            get {
                return ResourceManager.GetString("BluetoothSetupWarningAfterLink", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a You need to sacrifice a dedicated Bluetooth dongle that will get reserved for use with wireless controllers only. If you&apos;re using a wireless mouse and/or keyboard via the listed dongle and install the driver, you will lose connection instantly and permanently! If you&apos;re unsure what to do next,.
        /// </summary>
        public static string BluetoothSetupWarningBeforeLink {
            get {
                return ResourceManager.GetString("BluetoothSetupWarningBeforeLink", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a please consult the documentation.
        /// </summary>
        public static string BluetoothSetupWarningLink {
            get {
                return ResourceManager.GetString("BluetoothSetupWarningLink", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Cancel.
        /// </summary>
        public static string Cancel {
            get {
                return ResourceManager.GetString("Cancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a In this step you can initialize one or more DualShock 3/4 controllers..
        /// </summary>
        public static string DualShockSetupDescription {
            get {
                return ResourceManager.GetString("DualShockSetupDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Initialized DualShock Controllers.
        /// </summary>
        public static string DualShockSetupInitialized {
            get {
                return ResourceManager.GetString("DualShockSetupInitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Installing WinUSB driver on DualShock 3 Devices.
        /// </summary>
        public static string DualShockSetupInstalling3 {
            get {
                return ResourceManager.GetString("DualShockSetupInstalling3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Installing WinUSB driver on DualShock 4 Devices.
        /// </summary>
        public static string DualShockSetupInstalling4 {
            get {
                return ResourceManager.GetString("DualShockSetupInstalling4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a If you haven&apos;t already, please plug in your DualShock 3 (or 4) controller with the USB cable now and wait until it appears in the list on the right..
        /// </summary>
        public static string DualShockSetupPleasePlugIn {
            get {
                return ResourceManager.GetString("DualShockSetupPleasePlugIn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Initialize all connected devices as DualShock 3/4 Controllers.
        /// </summary>
        public static string DualShockSetupStartInstall {
            get {
                return ResourceManager.GetString("DualShockSetupStartInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a DualShock controllers installed successfully.
        /// </summary>
        public static string DualShockSetupSuccessInstruction {
            get {
                return ResourceManager.GetString("DualShockSetupSuccessInstruction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Install DualShock 3/4 Controllers.
        /// </summary>
        public static string DualShockSetupTitle {
            get {
                return ResourceManager.GetString("DualShockSetupTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Uninitialized DualShock Controllers.
        /// </summary>
        public static string DualShockSetupUninitialized {
            get {
                return ResourceManager.GetString("DualShockSetupUninitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Finish.
        /// </summary>
        public static string Finish {
            get {
                return ResourceManager.GetString("Finish", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Once you finished this wizard, the main service will be started and your controllers connected automatically..
        /// </summary>
        public static string FinishedAutoService {
            get {
                return ResourceManager.GetString("FinishedAutoService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a This is the last page in the process.
        /// </summary>
        public static string FinishedDescription {
            get {
                return ResourceManager.GetString("FinishedDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a That&apos;s it! Wasn&apos;t so bad now was it? Enjoy your games!.
        /// </summary>
        public static string FinishedThatsIt {
            get {
                return ResourceManager.GetString("FinishedThatsIt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Installation finished.
        /// </summary>
        public static string FinishedTitle {
            get {
                return ResourceManager.GetString("FinishedTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Help.
        /// </summary>
        public static string Help {
            get {
                return ResourceManager.GetString("Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Next &gt;.
        /// </summary>
        public static string Next {
            get {
                return ResourceManager.GetString("Next", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a A reboot is required for the driver installation to complete. Please restart your machine after you finished this installation wizard..
        /// </summary>
        public static string RebootRequiredContent {
            get {
                return ResourceManager.GetString("RebootRequiredContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Reboot required.
        /// </summary>
        public static string RebootRequiredTitle {
            get {
                return ResourceManager.GetString("RebootRequiredTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a In this step you can install the Windows Service..
        /// </summary>
        public static string ServiceSetupDescription {
            get {
                return ResourceManager.GetString("ServiceSetupDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a If the service is already installed, it will automatically get started after the Driver Installer has finished..
        /// </summary>
        public static string ServiceSetupIfAlreadyPresent {
            get {
                return ResourceManager.GetString("ServiceSetupIfAlreadyPresent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a This is basically the core logic of the toolkit so installation is necessary for everything to function correctly..
        /// </summary>
        public static string ServiceSetupInstallationRequired {
            get {
                return ResourceManager.GetString("ServiceSetupInstallationRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Installing Windows Service.
        /// </summary>
        public static string ServiceSetupInstalling {
            get {
                return ResourceManager.GetString("ServiceSetupInstalling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Install Windows Service.
        /// </summary>
        public static string ServiceSetupStartInstall {
            get {
                return ResourceManager.GetString("ServiceSetupStartInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Congratulations! It looks like the service was installed properly, please proceed to the next step..
        /// </summary>
        public static string ServiceSetupSuccessContent {
            get {
                return ResourceManager.GetString("ServiceSetupSuccessContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Service installed successfully.
        /// </summary>
        public static string ServiceSetupSuccessInstruction {
            get {
                return ResourceManager.GetString("ServiceSetupSuccessInstruction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Install Windows Service.
        /// </summary>
        public static string ServiceSetupTitle {
            get {
                return ResourceManager.GetString("ServiceSetupTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Handling USB/Bluetooth connections and translating data back and forth between controllers and the XInput emulator driver is done via a Windows Service..
        /// </summary>
        public static string ServiceSetupWhyIsItNeeded {
            get {
                return ResourceManager.GetString("ServiceSetupWhyIsItNeeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a I&apos;m sorry to inform you that some of your devices weren&apos;t installed properly.
        ///
        ///Sadly, there are too many possibilities of why it failed to cram all suggested resolutions in one of these info boxes, but I can give you some hints on resolving the issue:
        ///
        ///1. Re-open this Driver Installer and simply try again. Seriously, try it.
        ///2. Reboot your machine. It&apos;s Windows, so it might help.
        ///3. Check your cabling. Your cat might have gnawed on your USB cable.
        ///4. Is your controller listen under &quot;Human Interface D [resto de la cadena truncado]&quot;;.
        /// </summary>
        public static string SetupFailedContent {
            get {
                return ResourceManager.GetString("SetupFailedContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a If you can&apos;t resolve this issue by yourself, &lt;a href=&quot;https://github.com/nefarius/ScpToolkit/wiki&quot;&gt;check out the online documentation&lt;/a&gt;..
        /// </summary>
        public static string SetupFailedFooter {
            get {
                return ResourceManager.GetString("SetupFailedFooter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a One or more installation tasks failed or did not complete.
        /// </summary>
        public static string SetupFailedInstructions {
            get {
                return ResourceManager.GetString("SetupFailedInstructions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Installation failed.
        /// </summary>
        public static string SetupFailedTitle {
            get {
                return ResourceManager.GetString("SetupFailedTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Installer result: {0} ({1}).
        /// </summary>
        public static string SetupFailedVerbose {
            get {
                return ResourceManager.GetString("SetupFailedVerbose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a If the device doesn&apos;t show up after a few seconds, it&apos;s either already equipped with the right driver or in a faulty state..
        /// </summary>
        public static string SetupIfNotShowingUp {
            get {
                return ResourceManager.GetString("SetupIfNotShowingUp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Once your device becomes visible, hit the button below to start the driver installation process for this particular device..
        /// </summary>
        public static string SetupPleaseStartInstall {
            get {
                return ResourceManager.GetString("SetupPleaseStartInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Congratulations! It looks like the necessary drivers are in their proper place, please proceed to the next step..
        /// </summary>
        public static string SetupSuccessContent {
            get {
                return ResourceManager.GetString("SetupSuccessContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Installation successful.
        /// </summary>
        public static string SetupSuccessTitle {
            get {
                return ResourceManager.GetString("SetupSuccessTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a ScpToolkit Driver Installer.
        /// </summary>
        public static string Title {
            get {
                return ResourceManager.GetString("Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Installing Virtual Bus Driver in Windows Driver Store.
        /// </summary>
        public static string VirtualBusSetupAddingDriverStore {
            get {
                return ResourceManager.GetString("VirtualBusSetupAddingDriverStore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Creating Hardware ID for Virtual Bus.
        /// </summary>
        public static string VirtualBusSetupCreating {
            get {
                return ResourceManager.GetString("VirtualBusSetupCreating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a In this step you can install the virtual Xbox 360 Controller driver..
        /// </summary>
        public static string VirtualBusSetupDescription {
            get {
                return ResourceManager.GetString("VirtualBusSetupDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a If the virtual bus device is already present on your system (because you&apos;re upgrading from an older version of ScpServer/ScpToolkit or you&apos;ve used tools like DS4Windows before), its driver will be automatically updated..
        /// </summary>
        public static string VirtualBusSetupIfAlreadyPresent {
            get {
                return ResourceManager.GetString("VirtualBusSetupIfAlreadyPresent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Installing driver on Virtual Bus.
        /// </summary>
        public static string VirtualBusSetupInstalling {
            get {
                return ResourceManager.GetString("VirtualBusSetupInstalling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Install virtual Xbox 360 Controller driver.
        /// </summary>
        public static string VirtualBusSetupStartInstall {
            get {
                return ResourceManager.GetString("VirtualBusSetupStartInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Virtual Bus installed successfully.
        /// </summary>
        public static string VirtualBusSetupSuccessInstruction {
            get {
                return ResourceManager.GetString("VirtualBusSetupSuccessInstruction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Install Xbox 360 Controller emulator driver..
        /// </summary>
        public static string VirtualBusSetupTitle {
            get {
                return ResourceManager.GetString("VirtualBusSetupTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a The Virtual Bus might also be used by other 3rd party tools running on your system (like DS4Windows, InputMapper, FreePIE, etc.), please make sure they are all closed/shut down to avoid system reboot..
        /// </summary>
        public static string VirtualBusSetupToAvoidRestart {
            get {
                return ResourceManager.GetString("VirtualBusSetupToAvoidRestart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a In this step we will attempt to install the virtual Xbox 360 Controller emulator driver (a.k.a. Scarlett.Crush Productions Virtual Bus Driver, ScpVBus or just Virtual Bus)..
        /// </summary>
        public static string VirtualBusSetupWhatWeWillDo {
            get {
                return ResourceManager.GetString("VirtualBusSetupWhatWeWillDo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca un recurso adaptado de tipo System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap Warning {
            get {
                object obj = ResourceManager.GetObject("Warning", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a This Wizard will walk you though the process of installing your Sony DualShock 3/4 controller(s) and/or Bluetooth hosts on your system..
        /// </summary>
        public static string WelcomeDescription {
            get {
                return ResourceManager.GetString("WelcomeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Greetings! This wizard will guide you through the installation process necessary to enjoy your Sony DualShock controller(s) on your Windows box and play Xbox-compatible (XInput) games using the DualShock!.
        /// </summary>
        public static string WelcomeGreetings {
            get {
                return ResourceManager.GetString("WelcomeGreetings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Welcome to the ScpToolkit Driver Installer.
        /// </summary>
        public static string WelcomeTitle {
            get {
                return ResourceManager.GetString("WelcomeTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Microsoft Xbox 360 Controller driver.
        /// </summary>
        public static string Xbox360Driver {
            get {
                return ResourceManager.GetString("Xbox360Driver", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a is required to be installed separately..
        /// </summary>
        public static string Xbox360DriverNeededAfterLink {
            get {
                return ResourceManager.GetString("Xbox360DriverNeededAfterLink", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a On Windows Vista/7 the.
        /// </summary>
        public static string Xbox360DriverNeededBeforeLink {
            get {
                return ResourceManager.GetString("Xbox360DriverNeededBeforeLink", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Download and install the right edition before you continue this wizard..
        /// </summary>
        public static string Xbox360DriverNeededInstallBeforeContinuing {
            get {
                return ResourceManager.GetString("Xbox360DriverNeededInstallBeforeContinuing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Microsoft Xbox 360 Controller driver.
        /// </summary>
        public static string Xbox360DriverNeededLink {
            get {
                return ResourceManager.GetString("Xbox360DriverNeededLink", resourceCulture);
            }
        }
    }
}
